import turtle
color1 = "orange"
color2 = "green"
color3 = "white"
color4 = "yellow"
color5 = "red"
color6 = "blue"

def main():
	Philip = turtle.Turtle()
	Philip.pensize(0)
	Philip.speed(1000000000)

	directions(Philip)
	setup(Philip)
	colors(Philip)
	outline_of_2x2(Philip)

	#Insert Notation Here
	turns(Philip, "Ui")
	#Insert Notation Here

def setup(Philip):
	Philip.pensize(5)
	Philip.color("black")
	Philip.penup()
	Philip.right(180)
	Philip.forward(300)
	Philip.left(90)
	Philip.forward(50)
	Philip.left(90)
	Philip.pendown()
 
def directions(Philip):
	Philip.write('''
This is a 2D 2x2 Rubikis cube simulator. At the top (line 20), 
please input a scramble and the cube will be
scrambled accordingly
Moves on a Rubikis cube are as follows:
U, Ui F, Fi, R, Ri, L, Li, D, Di, B and Bi
U is the top layer
F is front face
R is the right side
L is the left side 	
D is the bottom layer
B is the back face, opposite the F

A normal move, U, R, L, etc. or a letter without an i or prime 
symbol (i, Ui, Ri, etc.) is clockwise
on that face while a prime 
or inverse move is counter clockwise

Only one move at a time is allowed on this 2x2, which will be reset every time

Have Fun
''', align="left", font=("Arial", 10, "normal"))

def outline_of_2x2(Philip):
	#outline
	Philip.pensize(5)
	Philip.pendown()
	Philip.color("black")
	Philip.forward(100)
	Philip.left(90)
	Philip.forward(100)
	Philip.right(90)
	Philip.forward(100)
	Philip.right(90)
	Philip.forward(100)
	Philip.left(90)
	Philip.forward(200)
	Philip.right(90)
	Philip.forward(100)
	Philip.right(90)
	Philip.forward(200)
	Philip.left(90)
	Philip.forward(100)
	Philip.right(90)
	Philip.forward(100)
	Philip.right(90)
	Philip.forward(100)
	Philip.left(90)
	Philip.forward(100)
	Philip.right(90)
	Philip.forward(100)
	Philip.right(90)
	Philip.forward(200)
	Philip.right(90)
	Philip.forward(100)
	Philip.right(90)
	Philip.forward(100)
	Philip.right(90)
	Philip.forward(100)
	Philip.right(90)
	Philip.forward(200)
	Philip.right(90)
	Philip.forward(100)
	Philip.left(90)
	#2x2 shape
	Philip.pensize(2)
	Philip.forward(50)
	Philip.left(90)
	Philip.forward(100)
	Philip.left(90)
	Philip.forward(50)
	Philip.left(90)
	Philip.forward(50)
	Philip.left(90)
	Philip.forward(100)
	Philip.right(180)
	Philip.forward(400)
	Philip.right(90)
	Philip.forward(50)
	Philip.right(90)
	Philip.forward(50)
	Philip.right(90)
	Philip.forward(100)
	Philip.left(90)
	Philip.forward(50)
	Philip.right(90)
	Philip.forward(50)
	Philip.left(90)
	Philip.forward(100)
	Philip.right(180)
	Philip.forward(100)
	Philip.left(90)
	Philip.forward(50)
	Philip.left(90)
	Philip.forward(50)
	Philip.left(90)
	Philip.forward(300)
	Philip.right(90)
	Philip.forward(50)
	Philip.right(90)
	Philip.forward(50)
	Philip.right(90)
	Philip.forward(100)
	Philip.left(90)
	Philip.forward(50)
	Philip.left(90)
	Philip.forward(150)
	Philip.right(90)
	Philip.forward(100)
	Philip.right(90)
	Philip.forward(250)
	Philip.right(90)
	Philip.forward(100)
	Philip.right(90)



def colors(Philip):
	Philip.color(color1)
	square(Philip)
	Philip.forward(100)
	Philip.color(color2)
	square(Philip)
	Philip.left(90)
	Philip.forward(100)
	Philip.right(90)
	Philip.color(color3)
	square(Philip)
	Philip.right(90)
	Philip.forward(200)
	Philip.left(90)
	Philip.color(color4)
	square(Philip)
	Philip.left(90)
	Philip.forward(100)
	Philip.right(90)
	Philip.forward(100)
	Philip.color(color5)
	square(Philip)
	Philip.forward(100)
	Philip.color(color6)
	square(Philip)
	Philip.right(180)
	Philip.forward(300)
	Philip.right(180)


def	square(Philip):
	Philip.pendown()
	Philip.begin_fill()
	for count in range(4):
		Philip.forward(100)
		Philip.right(90)
	Philip.end_fill()
	Philip.penup()

def top_rectangle(Philip):
	Philip.pendown()
	Philip.begin_fill()
	for count in range(2):
		Philip.forward(100)
		Philip.right(90)
		Philip.forward(50)
		Philip.right(90)
	Philip.end_fill()
	Philip.penup()

def side_rectangle(Philip):
	Philip.pendown()
	Philip.begin_fill()
	for count in range(2):
		Philip.forward(50)
		Philip.right(90)
		Philip.forward(100)
		Philip.right(90)
	Philip.end_fill()
	Philip.penup()


def turns(Philip, Notation):
	print Notation
	if Notation == "U" or "Ui" or "R" or "Ri" or "L" or "Li" or "B" or "Bi" or "D" or "Di" or "F" or "Fi":
		if Notation == "U":
			Philip.color(color2)
			top_rectangle(Philip)
			Philip.forward(100)
			Philip.color(color5)
			top_rectangle(Philip)
			Philip.forward(100)
			Philip.color(color6)
			top_rectangle(Philip)
			Philip.forward(100)
			Philip.color(color1)
			top_rectangle(Philip)
			Philip.right(180)
			Philip.forward(300)
			Philip.right(180)
			outline_of_2x2(Philip)
		elif Notation == "Ui":
			Philip.color(color6)
			top_rectangle(Philip)
			Philip.forward(100)
			Philip.color(color1)
			top_rectangle(Philip)
			Philip.forward(100)
			Philip.color(color2)
			top_rectangle(Philip)
			Philip.forward(100)
			Philip.color(color5)
			top_rectangle(Philip)
			Philip.right(180)
			Philip.forward(300)
			Philip.right(180)
			outline_of_2x2(Philip)
		elif Notation == "D":
			Philip.right(90)
			Philip.forward(50)
			Philip.left(90)
			Philip.color(color6)
			top_rectangle(Philip)
			Philip.forward(100)
			Philip.color(color1)
			top_rectangle(Philip)
			Philip.forward(100)
			Philip.color(color2)
			top_rectangle(Philip)
			Philip.forward(100)
			Philip.color(color5)
			top_rectangle(Philip)
			Philip.left(90)
			Philip.forward(50)
			Philip.left(90)
			Philip.forward(300)
			Philip.right(180)
			outline_of_2x2(Philip)
		elif Notation == "Di":
			Philip.right(90)
			Philip.forward(50)
			Philip.left(90)
			Philip.color(color2)
			top_rectangle(Philip)
			Philip.forward(100)
			Philip.color(color5)
			top_rectangle(Philip)
			Philip.forward(100)
			Philip.color(color6)
			top_rectangle(Philip)
			Philip.forward(100)
			Philip.color(color1)
			top_rectangle(Philip)
			Philip.left(90)
			Philip.forward(50)
			Philip.left(90)
			Philip.forward(300)
			Philip.right(180)
			outline_of_2x2(Philip)
		elif Notation == "R":
			Philip.forward(150)
			Philip.color(color4)
			side_rectangle(Philip)
			Philip.left(90)
			Philip.forward(100)
			Philip.right(90)
			Philip.color(color2)
			side_rectangle(Philip)
			Philip.right(90)
			Philip.forward(200)
			Philip.left(90)
			Philip.color(color6)
			side_rectangle(Philip)
			Philip.left(90)
			Philip.forward(100)
			Philip.right(90)
			Philip.forward(200)
			Philip.color(color3)
			side_rectangle(Philip)
			Philip.right(180)
			Philip.forward(350)
			Philip.right(180)
			outline_of_2x2(Philip)
		elif Notation == "Ri":
			Philip.forward(150)
			Philip.color(color3)
			side_rectangle(Philip)
			Philip.left(90)
			Philip.forward(100)
			Philip.right(90)
			Philip.color(color6)
			side_rectangle(Philip)
			Philip.right(90)
			Philip.forward(200)
			Philip.left(90)
			Philip.color(color2)
			side_rectangle(Philip)
			Philip.left(90)
			Philip.forward(100)
			Philip.right(90)
			Philip.forward(200)
			Philip.color(color4)
			side_rectangle(Philip)
			Philip.right(180)
			Philip.forward(350)
			Philip.right(180)
			outline_of_2x2(Philip)
		elif Notation == "L":
			Philip.forward(100)
			Philip.color(color3)
			side_rectangle(Philip)
			Philip.left(90)
			Philip.forward(100)
			Philip.right(901)
			Philip.color(color6)
			side_rectangle(Philip)
			Philip.right(90)
			Philip.forward(200)
			Philip.left(90)
			Philip.color(color2)
			side_rectangle(Philip)
			Philip.left(90)
			Philip.forward(100)
			Philip.right(90)
			Philip.forward(200)
			Philip.color(color4)
			side_rectangle(Philip)
			Philip.right(180)
			Philip.forward(300)
			Philip.right(180)
			outline_of_2x2(Philip)
		elif Notation == "Li":
			Philip.forward(100)
			Philip.color(color4)
			side_rectangle(Philip)
			Philip.left(90)
			Philip.forward(100)
			Philip.right(90)
			Philip.color(color2)
			side_rectangle(Philip)
			Philip.right(90)
			Philip.forward(200)
			Philip.left(90)
			Philip.color(color6)
			side_rectangle(Philip)
			Philip.left(90)
			Philip.forward(100)
			Philip.right(90)
			Philip.forward(200)
			Philip.color(color3)
			side_rectangle(Philip)
			Philip.right(180)
			Philip.forward(300)
			Philip.right(180)
			outline_of_2x2(Philip)
		elif Notation == "F":
			Philip.forward(50)
			Philip.color(color4)
			side_rectangle(Philip)
			Philip.forward(50)
			Philip.left(90)
			Philip.forward(50)
			Philip.right(90)
			Philip.color(color1)
			top_rectangle(Philip)
			Philip.right(90)
			Philip.forward(150)
			Philip.left(90)
			Philip.color(color5)
			top_rectangle(Philip)
			Philip.forward(100)
			Philip.left(90)
			Philip.forward(100)
			Philip.right(90)
			Philip.color(color3)
			side_rectangle(Philip)
			Philip.right(180)
			Philip.forward(200)
			Philip.right(180)
			outline_of_2x2(Philip)
		elif Notation == "Fi":
			Philip.forward(50)
			Philip.color(color3)
			side_rectangle(Philip)
			Philip.forward(50)
			Philip.left(90)
			Philip.forward(50)
			Philip.right(90)
			Philip.color(color5)
			top_rectangle(Philip)
			Philip.right(90)
			Philip.forward(150)
			Philip.left(90)
			Philip.color(color1)
			top_rectangle(Philip)
			Philip.forward(100)
			Philip.left(90)
			Philip.forward(100)
			Philip.right(90)
			Philip.color(color4)
			side_rectangle(Philip)
			Philip.right(180)
			Philip.forward(200)
			Philip.right(180)
			outline_of_2x2(Philip)
		elif Notation == "B":
			Philip.color(color3)
			side_rectangle(Philip)
			Philip.forward(100)
			Philip.left(90)
			Philip.forward(100)
			Philip.right(90)
			Philip.color(color5)
			top_rectangle(Philip)
			Philip.right(90)
			Philip.forward(250)
			Philip.left(90)
			Philip.color(color1)
			top_rectangle(Philip)
			Philip.left(90)
			Philip.forward(150)
			Philip.right(90)
			Philip.forward(150)
			Philip.color(color4)
			side_rectangle(Philip)
			Philip.right(180)
			Philip.forward(250)
			Philip.right(180)
			outline_of_2x2(Philip)
		elif Notation == "Bi":
			Philip.color(color4)
			side_rectangle(Philip)
			Philip.forward(100)
			Philip.left(90)
			Philip.forward(100)
			Philip.right(90)
			Philip.color(color1)
			top_rectangle(Philip)
			Philip.right(90)
			Philip.forward(250)
			Philip.left(90)
			Philip.color(color5)
			top_rectangle(Philip)
			Philip.left(90)
			Philip.forward(150)
			Philip.right(90)
			Philip.forward(150)
			Philip.color(color3)
			side_rectangle(Philip)
			Philip.right(180)
			Philip.forward(250)
			Philip.right(180)
			outline_of_2x2(Philip)
	else:
		Philip.write("Please enter correct Rubikis Cube notation", align = "right")




main()
turtle.done()
